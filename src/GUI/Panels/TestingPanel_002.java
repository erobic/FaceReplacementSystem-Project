/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI.Panels;

import Helpers.ImageWarper;
import Image.Helper_Blending;
import Image.HistogramEQ;
import Image.ImageProcessor;
import Image.Image_002;
import ShrinkingTest.ErosionClass;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.image.BufferedImage;

/**
 *
 * @author power
 */
public class TestingPanel_002 extends AbstractControlPanel {

    /**
     * Creates new form TestingPanel_002
     */
    public TestingPanel_002() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        estimageSkinColor = new javax.swing.JButton();
        faceMask = new javax.swing.JButton();
        HistogramEqualization = new javax.swing.JButton();
        replaceFace = new javax.swing.JButton();
        warpFace = new javax.swing.JButton();
        shrink = new javax.swing.JButton();
        HoleFilledImage = new javax.swing.JButton();
        BlendEdge = new javax.swing.JButton();

        estimageSkinColor.setText("estimateSkinColor");
        estimageSkinColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                estimageSkinColorActionPerformed(evt);
            }
        });

        faceMask.setText("faceMask");
        faceMask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                faceMaskActionPerformed(evt);
            }
        });

        HistogramEqualization.setText("HistogramEqualization");
        HistogramEqualization.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HistogramEqualizationActionPerformed(evt);
            }
        });

        replaceFace.setText("replaceFace");
        replaceFace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                replaceFaceActionPerformed(evt);
            }
        });

        warpFace.setText("WarpFace");
        warpFace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                warpFaceActionPerformed(evt);
            }
        });

        shrink.setText("shrink(Erosion)");
        shrink.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shrinkActionPerformed(evt);
            }
        });

        HoleFilledImage.setText("HoleFilledImage");
        HoleFilledImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HoleFilledImageActionPerformed(evt);
            }
        });

        BlendEdge.setText("BlendEdge");
        BlendEdge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BlendEdgeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BlendEdge)
                    .addComponent(HoleFilledImage)
                    .addComponent(shrink)
                    .addComponent(warpFace)
                    .addComponent(replaceFace)
                    .addComponent(HistogramEqualization)
                    .addComponent(faceMask)
                    .addComponent(estimageSkinColor))
                .addContainerGap(109, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(estimageSkinColor)
                .addGap(18, 18, 18)
                .addComponent(faceMask)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(HistogramEqualization)
                .addGap(18, 18, 18)
                .addComponent(replaceFace)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(warpFace)
                .addGap(27, 27, 27)
                .addComponent(shrink)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(HoleFilledImage)
                .addGap(18, 18, 18)
                .addComponent(BlendEdge)
                .addContainerGap(90, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void estimageSkinColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_estimageSkinColorActionPerformed
        if(this.parent.rootFrame.getSequenceMode().isSelected()){
            BufferedImage b=this.parent.picturePanel.lastDrawnImage;
            if(b!=null)
            this.parent.picturePanel.DrawImage(Image.ImageProcessor.analyseSkin(b));
        }else{
            //System.out.println("The button is not selected");
            BufferedImage b=parent.ActiveImage.originalImage;
            if(b!=null){
                this.parent.picturePanel.DrawImage(Image.ImageProcessor.analyseSkin(b));
            }
        }
    }//GEN-LAST:event_estimageSkinColorActionPerformed

    private void faceMaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_faceMaskActionPerformed
        if(this.parent.rootFrame.getSequenceMode().isSelected()){
            BufferedImage b=this.parent.picturePanel.lastDrawnImage;
            if(b!=null)
            this.parent.picturePanel.DrawImage(parent.ActiveImage.getFaceMask(b));
        }else{
            //System.out.println("The button is not selected");
            BufferedImage b=parent.ActiveImage.originalImage;
            if(b!=null){
                this.parent.picturePanel.DrawImage(parent.ActiveImage.getFaceMask(b));
            }
        }
    }//GEN-LAST:event_faceMaskActionPerformed

    private void HistogramEqualizationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HistogramEqualizationActionPerformed
        if(this.parent.rootFrame.getSequenceMode().isSelected()){
            BufferedImage b=this.parent.picturePanel.lastDrawnImage;
            if(b!=null)
            this.parent.picturePanel.DrawImage(HistogramEQ.histogramEqualization(b));
        }else{
            //System.out.println("The button is not selected");
            BufferedImage b=parent.ActiveImage.originalImage;
            if(b!=null){
                this.parent.picturePanel.DrawImage(HistogramEQ.histogramEqualization(b));
            }
        }
    }//GEN-LAST:event_HistogramEqualizationActionPerformed

    private void replaceFaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_replaceFaceActionPerformed
        Image_002 image=parent.sourceImage;
        //BufferedImage sourceFace=image.getFaceImageAccordingToYCbCr();
        //BufferedImage sourceFace=image.getFaceAccordingToSkinColorAndBoundaryFilling();
        BufferedImage masked=parent.targetImage.maskFaceImage(image.getFaceAccordingToSkinColorAndBoundaryFilling());
        parent.picturePanel.DrawImage(masked);
    }//GEN-LAST:event_replaceFaceActionPerformed

    private void warpFaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_warpFaceActionPerformed
        Image_002 sourceImage=parent.sourceImage;
        Image_002 targetImage=parent.targetImage;
        BufferedImage sourceFace=sourceImage.getFaceAccordingToSkinColorAndBoundaryFilling();
        
        Point [] sourceFeaturePoints=sourceImage.getLocalFeaturePointArray();
        Point [] targetFeaturePoints=targetImage.getLocalFeaturePointArray();
        
               ImageWarper iw =new ImageWarper(sourceFace, sourceFeaturePoints, targetFeaturePoints);//warpedImage
                BufferedImage warped=iw.runGet();
        Point warpedChin=iw.getMappedPoint(sourceFeaturePoints[2]) ;
        
        System.err.println("THE source chin point is ("+sourceFeaturePoints[2].x+","+sourceFeaturePoints[2].y+")");
        System.err.println("THE target chin point is ("+targetFeaturePoints[2].x+","+targetFeaturePoints[2].y+")");
        System.err.println("THE warped chin point is ("+warpedChin.x+","+warpedChin.y+")");
        
        BufferedImage finalWarpedBlended=
                Helper_Blending.getBlendedImage(warped, warpedChin, targetImage.originalImage, targetImage.chinPoint);
        
        parent.picturePanel.DrawImage(finalWarpedBlended);
    }//GEN-LAST:event_warpFaceActionPerformed

    private void shrinkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shrinkActionPerformed
        ErosionClass c=new ErosionClass(10);
//        Image_002 sourceImage=parent.sourceImage;
//        Image_002 targetImage=parent.targetImage;
//        BufferedImage sourceFace=sourceImage.getFaceAccordingToSkinColorAndBoundaryFilling();
        BufferedImage shrinked=c.apply(parent.ActiveImage.originalImage);
        parent.picturePanel.DrawImage(shrinked);
    }//GEN-LAST:event_shrinkActionPerformed

    private void HoleFilledImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HoleFilledImageActionPerformed
        Image_002 source=parent.ActiveImage;
        Rectangle rectangle=source.rectangle;
        int width=rectangle.width;
        int height=rectangle.height;
        int [][] matrix=source.getMaskMatrix();//this is working fine
        int [][] boundary=source.findBoundary2(matrix, width-1, height-1);
        int [][] fineMatrix=source.holeFillAccordingToBoundary(matrix,width,height);
        int [][] inverseMatrix=source.invertMatrix(fineMatrix, width, height);
        int [][] finerMatrix=source.holeFillAccordingToBoundary(inverseMatrix,height,width);
        int [][] erectMatrix=source.invertMatrix(finerMatrix, height, width);
        //return sconvertMaskToFace(holeFillAccordingToBoundary(erectMatrix,width,height));
        
        parent.picturePanel.DrawImage(Helper_Blending.maskToBinary(erectMatrix, width, height));
    }//GEN-LAST:event_HoleFilledImageActionPerformed

    private void BlendEdgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BlendEdgeActionPerformed
//        BufferedImage i=Helper_Blending.BlendPoints_Average(parent.ActiveImage.originalImage, parent.ActiveImage.leftLowerBoundary);
//        parent.picturePanel.DrawImage(i);
    }//GEN-LAST:event_BlendEdgeActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BlendEdge;
    private javax.swing.JButton HistogramEqualization;
    private javax.swing.JButton HoleFilledImage;
    private javax.swing.JButton estimageSkinColor;
    private javax.swing.JButton faceMask;
    private javax.swing.JButton replaceFace;
    private javax.swing.JButton shrink;
    private javax.swing.JButton warpFace;
    // End of variables declaration//GEN-END:variables
}
